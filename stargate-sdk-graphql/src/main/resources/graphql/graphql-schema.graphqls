enum BasicType {
  CUSTOM
  INT
  TIMEUUID
  TIMESTAMP
  UDT
  BIGINT
  TIME
  DURATION
  VARINT
  UUID
  BOOLEAN
  TINYINT
  SMALLINT
  INET
  ASCII
  DECIMAL
  BLOB
  LIST
  MAP
  VARCHAR
  TUPLE
  DOUBLE
  COUNTER
  DATE
  TEXT
  FLOAT
  SET
}

input ClusteringKeyInput {
  name: String!
  type: DataTypeInput!
  order: String
}

type Column {
  kind: ColumnKind
  name: String!
  type: DataType!
}

input ColumnInput {
  name: String!
  type: DataTypeInput!
}

enum ColumnKind {
  COMPACT
  UNKNOWN
  PARTITION
  CLUSTERING
  REGULAR
  STATIC
}

type DataCenter {
  name: String!
  replicas: Int!
}

# The DC-level replication options passed to 'createKeyspace.datacenters'.
input DataCenterInput {
  # The name of the datacenter.
  name: String!

  # The replication factor for this datacenter.
  replicas: Int
}

type DataType {
  basic: BasicType!
  info: DataTypeInfo
}

type DataTypeInfo {
  name: String
  subTypes: [DataType]
  frozen: Boolean
}

input DataTypeInfoInput {
  subTypes: [DataTypeInput]
  name: String
  frozen: Boolean
}

input DataTypeInput {
  info: DataTypeInfoInput
  basic: BasicType!
}

type Field {
  name: String!
  type: DataType!
}

enum IndexKind {
  KEYS
  VALUES
  ENTRIES
  FULL
}

type Keyspace {
  dcs: [DataCenter]
  name: String!
  table(name: String!): Table
  tables: [Table]
  type(name: String!): Type
  types: [Type]
}

type Mutation {
  createTable(
    keyspaceName: String!
    tableName: String!
    partitionKeys: [ColumnInput]!
    clusteringKeys: [ClusteringKeyInput]
    values: [ColumnInput]
    ifNotExists: Boolean
  ): Boolean
  alterTableAdd(
    keyspaceName: String!
    tableName: String!
    toAdd: [ColumnInput]!
  ): Boolean
  alterTableDrop(
    keyspaceName: String!
    tableName: String!
    toDrop: [String]!
  ): Boolean
  dropTable(
    keyspaceName: String!
    tableName: String!
    ifExists: Boolean
  ): Boolean
  createType(
    keyspaceName: String!
    typeName: String!
    fields: [ColumnInput]!
    ifNotExists: Boolean
  ): Boolean
  dropType(keyspaceName: String!, typeName: String!, ifExists: Boolean): Boolean
  createIndex(
    keyspaceName: String!
    tableName: String!
    columnName: String!
    indexName: String

    # Adds a custom index type that can be identified by name (e.g., StorageAttachedIndex), or class name (e.g., org.apache.cassandra.index.sasi.SASIIndex)
    indexType: String
    ifNotExists: Boolean

    # KEYS (indexes keys of a map), ENTRIES (index entries of a map), VALUES (index values of a collection), FULL (full index of a frozen collection)
    indexKind: IndexKind
  ): Boolean
  dropIndex(
    keyspaceName: String!
    indexName: String!
    ifExists: Boolean
  ): Boolean

  # Creates a new CQL keyspace
  createKeyspace(
    # The name of the keyspace
    name: String!

    # Whether the operation will succeed if the keyspace already exists. Defaults to false if absent.
    ifNotExists: Boolean

    # Enables SimpleStrategy replication with the given replication factor. You must specify either this or 'datacenters', but not both.
    replicas: Int

    # Enables NetworkTopologyStrategy with the given replication factors per DC. (at least one DC must be specified).You must specify either this or 'replicas', but not both.
    datacenters: [DataCenterInput]
  ): Boolean

  # Drops a CQL keyspace
  dropKeyspace(
    # The name of the keyspace
    name: String!

    # Whether the operation will succeed if the keyspace does not exist. Defaults to false if absent.
    ifExists: Boolean
  ): Boolean
}

type Query {
  keyspace(name: String!): Keyspace
  keyspaces: [Keyspace]
}

type Table {
  columns: [Column]
  name: String!
}

type Type {
  fields: [Field]
  name: String!
}
